<!--- TEMPLATENAME: klaviyoListeners.isml --->
<iscomment>
    KL IDENTIFY:
    The JS in this template captures the CSS selectors set in two Site Preferences in Business Manager and applies klaviyo listeners to the corresponding input fields
    so that users can be identified when filling out either phone number or email fields within any part of the site. This template is included in
    klaviyoFooter.isml.

    Site Preference "Klaviyo Email Selectors" (ID: klaviyo_email_selectors) is a Set of Strings, meaning that multiple individual CSS selectors can be entered to target
    different email and/or phone fields that appear in the site.  Note that Mutation Observers have been utilized to allow for targeting fields that might get added
    to the page post-page-load (ie, via third party JS DOM injection, as one example)

    KL EVENT TRACKING:
    Site Preference "Klaviyo Checkout Email Selector" (ID: klaviyo_checkout_email_selector) is a single String field that should be set to contain a CSS selector that targets
    the input field that collects the user's email address in the checkout flow.  This is important as it allows for tracking the Started Checkout event with the email address
    that is associated with the basket / order as soon as possible during the checkout process.  Note that where and when email address collection occurs in checkout is often 
    customized in SFCC sites, thus necessitating a dedicated Site Preference to allow the end client to target this field regardless of how it has been customized.

    Once the user has entered their email address in the targeted field, AJAX is triggered to call the Klaviyo-StartedCheckoutEvent route, passing along a BASE64 encoded
    version of the email address.  That controller then takes over to send the Started Checkout event via the standard server-side service framework.
</iscomment>

<isset name="KLselectors" value="${dw.system.Site.getCurrent().getCustomPreferenceValue('klaviyo_email_selectors')}" scope="page" />
<isset name="KLCheckoutSelector" value="${dw.system.Site.getCurrent().getCustomPreferenceValue('klaviyo_checkout_email_selector')}" scope="page" />

<script>
    var klaviyoJS = {};
    klaviyoJS.sfccEmailRegex = new RegExp(/^[\w.%+-]+@[\w.-]+\.[\w]{2,6}$/);
    klaviyoJS.e164PhoneRegex = new RegExp(/^\+[1-9]\d{1,14}$/);

<iscomment>KL EVENT TRACKING: Started Checkout email collection and trigger</iscomment>
<isif condition="${KLCheckoutSelector && !empty(KLCheckoutSelector)}">
    let selectedInput = document.querySelectorAll('${KLCheckoutSelector}');
    if (selectedInput) {
        Array.from(selectedInput).forEach(klavInput => {
            klavInput.addEventListener("change", function() {
                if( klaviyoJS.sfccEmailRegex.test (klavInput.value) ) {
                    $.ajax({
                        url: "${dw.web.URLUtils.https('Klaviyo-StartedCheckoutEvent')}",
                        type: 'post',
                        data: { a: btoa(klavInput.value) },
                        error: function (err) {
                            console.warn('Klaviyo StartedCheckoutEvent failure: ' + err.statusText);
                        }
                    });
                }
            });
        });
    }
</isif>
</script>

<iscomment>KL IDENTIFY: JS to wire up listeners to all fields targeted via the Klaviyo Email Selectors Site Preference</iscomment>
<isif condition="${KLselectors && !empty(KLselectors)}">
    <script>
        var KLselectors = <isprint value="${JSON.stringify(dw.system.Site.current.preferences.custom.klaviyo_email_selectors)}" encoding="off" />;
        klaviyoJS.emailFieldSelectors = Array.isArray(KLselectors) ? KLselectors : Object.values(KLselectors);
        klaviyoJS.getExchangeID = function () {
            var klaviyoCookie = document.cookie.split('; ').filter(function(c) {return /__kla_id=/.test(c)});
            return JSON.parse(atob(klaviyoCookie[0].split("__kla_id=")[1])).$exchange_id;
        };
        klaviyoJS.identifyPhone = function(inputVal) {
            let formattedPhone = '+' + inputVal.replace(/[^a-z0-9]/gi, '');
            if (klaviyoJS.e164PhoneRegex.test(formattedPhone)){
                klaviyo.identify({ '$phone_number' : formattedPhone }).then(() => { klaviyoJS.identifiedUser = true; klaviyoJS.exchangeID = klaviyoJS.getExchangeID(); klaviyoJS.phone = formattedPhone; });
            }
        };
        klaviyoJS.phoneOrEmail = function(inputVal) {
            if (klaviyoJS.sfccEmailRegex.test (inputVal.target.value)) {
                klaviyo.identify({ '$email' : inputVal.target.value }).then(() => { klaviyoJS.identifiedUser = true; klaviyoJS.exchangeID = klaviyoJS.getExchangeID(); });
            }
            if (Number(inputVal.target.value.replace(/[^a-z0-9]/gi, ''))) {
                klaviyoJS.identifyPhone(inputVal.target.value);
            }
        };
        Promise.resolve(klaviyo.isIdentified()).then((result) => { klaviyoJS.identifiedUser = result });

        window.addEventListener('DOMContentLoaded', (event) => {
            if ("MutationObserver" in window) {
                let page = document.body;
                const observer = new MutationObserver(mutations => {
                    klaviyoListeners();
                });

                observer.observe(page, {
                    childList: true,
                    subtree: true
                });
            }
        });

        function klaviyoListeners() {
            for (let i = 0; i < klaviyoJS.emailFieldSelectors.length; i++) {
                let selectedInput = document.querySelectorAll(klaviyoJS.emailFieldSelectors[i]);
                if (selectedInput) {
                    Array.from(selectedInput).forEach(klavInput => {
                        if (klavInput && !klavInput.hasAttribute('data-listener')) {
                            klavInput.setAttribute('data-listener', 'klaviyo');
                            klavInput.addEventListener("change", (klavInput) => klaviyoChangeEvent(klavInput));
                        }
                    })
                }
            }
        }

        function klaviyoChangeEvent(input){
            if (!klaviyoJS.identifiedUser) {
                klaviyoJS.phoneOrEmail(input);
            }
            if (input.target.pattern.length && input.target.value.match(input.target.pattern)) {
                if (klaviyoJS.identifiedUser && klaviyoJS.exchangeID && klaviyoJS.phone) {
                    klaviyo.identify({ '$email' : input.target.value, '$phone_number' : klaviyoJS.phone }).then(() => { klaviyoJS.identifiedUser = true; klaviyoJS.exchangeID = klaviyoJS.getExchangeID(); });
                }
            } else {
                if (klaviyoJS.identifiedUser && klaviyoJS.exchangeID && klaviyoJS.phone && klaviyoJS.sfccEmailRegex.test (input.target.value)) {
                    klaviyo.identify({ '$email' : input.target.value, '$phone_number' : klaviyoJS.phone }).then(() => { klaviyoJS.identifiedUser = true; klaviyoJS.exchangeID = klaviyoJS.getExchangeID(); });
                }
            }
        }

        klaviyoListeners();
    </script>
</isif>
