<!--- TEMPLATENAME: klaviyoListeners.isml --->
<iscomment>
    KL IDENTIFY:
    The JS in this template captures the CSS selectors set in two Site Preferences in Business Manager and applies klaviyo listeners to the corresponding input fields
    so that users can be identified when filling out either phone number or email fields within any part of the site. This template is included in
    klaviyoFooter.isml.

    Site Preference "Klaviyo Email Selectors" (ID: klaviyo_email_selectors) is a Set of Strings, meaning that multiple individual CSS selectors can be entered to target
    different email and/or phone fields that appear in the site.  Note that Mutation Observers have been utilized to allow for targeting fields that might get added
    to the page post-page-load (ex: via third party JS DOM injection, etc.)

    KL EVENT TRACKING:
    Site Preference "Klaviyo Checkout Email Selector" (ID: klaviyo_checkout_email_selector) is a single String field that should be set to contain a CSS selector that targets
    the input field that collects the user's email address in the checkout flow.  This is important as it allows for tracking the Started Checkout event with the email address
    that is associated with the basket / order as soon as possible during the checkout process.  Note that where and when email address collection occurs in checkout is often
    customized in SFCC sites, thus necessitating a dedicated Site Preference to allow the end client to target this field regardless of how it has been customized.

    Once the user has entered their email address in the targeted field, AJAX is triggered to call the Klaviyo-StartedCheckoutEvent route, passing along a BASE64 encoded
    version of the email address.  That controller then takes over to send the Started Checkout event via the standard server-side service framework.
</iscomment>

<isset name="KLselectors" value="${dw.system.Site.getCurrent().getCustomPreferenceValue('klaviyo_email_selectors')}" scope="page" />
<isset name="KLCheckoutSelector" value="${dw.system.Site.getCurrent().getCustomPreferenceValue('klaviyo_checkout_email_selector')}" scope="page" />

<script>
    var klaviyoJS = {};
    klaviyoJS.sfccEmailRegex = new RegExp(/^[\w.%+-]+@[\w.-]+\.[\w]{2,6}$/);
    klaviyoJS.e164PhoneRegex = new RegExp(/^\+[1-9]\d{1,14}$/);

<iscomment>KL EVENT TRACKING: Started Checkout email collection and trigger</iscomment>
<isif condition="${KLCheckoutSelector && !empty(KLCheckoutSelector)}">
    let selectedInput = document.querySelectorAll('${KLCheckoutSelector}');
    if (selectedInput) {
        Array.from(selectedInput).forEach(klavInput => {
            klavInput.addEventListener("change", function() {
                if( klaviyoJS.sfccEmailRegex.test (klavInput.value) ) {
                    $.ajax({
                        url: "${dw.web.URLUtils.https('Klaviyo-StartedCheckoutEvent')}",
                        type: 'post',
                        data: { a: btoa(klavInput.value) },
                        error: function (err) {
                            console.warn('Klaviyo StartedCheckoutEvent failure: ' + err.statusText);
                        }
                    });
                }
            });
        });
    }
</isif>
</script>

<iscomment>KL IDENTIFY: JS to wire up listeners to all fields targeted via the Klaviyo Email Selectors Site Preference</iscomment>
<isif condition="${KLselectors && !empty(KLselectors)}">
    <script>
        <iscomment>The KLselectors variable stores all of the configured CSS selectors for the Klaviyo Email Selectors Site Preference to locate matching inputs on any given page</iscomment>
        var KLselectors = <isprint value="${JSON.stringify(dw.system.Site.current.preferences.custom.klaviyo_email_selectors)}" encoding="off" />;
        klaviyoJS.emailFieldSelectors = Array.isArray(KLselectors) ? KLselectors : Object.values(KLselectors);
        klaviyoJS.getExchangeID = function () {
            var klaviyoCookie = document.cookie.split('; ').filter(function(c) {return /__kla_id=/.test(c)});
            return JSON.parse(atob(klaviyoCookie[0].split("__kla_id=")[1])).$exchange_id;
        };

        klaviyoJS.identifyPhone = function(inputVal) {
            let formattedPhone = '+' + inputVal.replace(/[^a-z0-9]/gi, '');
            if (klaviyoJS.e164PhoneRegex.test(formattedPhone)){
                klaviyo.identify({ '$phone_number' : formattedPhone }).then(() => { klaviyoJS.identifiedUser = true; klaviyoJS.exchangeID = klaviyoJS.getExchangeID(); klaviyoJS.phone = formattedPhone; });
            }
        };

        <iscomment>This function determines whether the entered value is an email address or a phone number. Regex patterns used in SFRA and any potential custom regex patterns applied to inputs are
        used to validate user-entered values before making any calls to klaviyo.identify()</iscomment>
        klaviyoJS.phoneOrEmail = function(inputVal) {
            if (klaviyoJS.sfccEmailRegex.test (inputVal.target.value)) {
                klaviyo.identify({ '$email' : inputVal.target.value }).then(() => { klaviyoJS.identifiedUser = true; klaviyoJS.exchangeID = klaviyoJS.getExchangeID(); });
            }
            if (Number(inputVal.target.value.replace(/[^a-z0-9]/gi, ''))) {
                klaviyoJS.identifyPhone(inputVal.target.value);
            }
        };
        Promise.resolve(klaviyo.isIdentified()).then((result) => { klaviyoJS.identifiedUser = result });

        <iscomment>This mutation observer watches for any third-party injections that may have appeared on the screen AFTER the page has been rendered. If a new element was injected,
        then the klaviyoListeners() function will re-run to then check if the newly injected elements are input fields that match a CSS value configured in the "Klaviyo Email Selectors" Site
        Preference.

        In short, this is the mutation observer responsible for placing klaviyo data-listener attributes and event listners for onChange events that may occur in third party inputs (Ex: pop-ups, etc.)</iscomment>
        window.addEventListener('DOMContentLoaded', (event) => {
            if ("MutationObserver" in window) {
                let page = document.body;
                const observer = new MutationObserver(mutations => {
                    klaviyoListeners();
                });

                observer.observe(page, {
                    childList: true,
                    subtree: true
                });
            }
        });

        <iscomment>The klaviyoListners() function captures all configured CSS selectors entered into the "Klaviyo Email Selectors" Site Preference (ID: klaviyo_email_selectors), and iterates through
        all inputs that are on a given page. The code checks each rendered input field for a match against the configured "Klaviyo Email Selectors" entered into Business Manager. When a match if found,
        the function places a klaviyo data-listner attribute (data-listener="klaviyo") and a places onChange event listner to process what values are entered into the selected input field.
        </iscomment>
        function klaviyoListeners() {
            for (let i = 0; i < klaviyoJS.emailFieldSelectors.length; i++) {
                let selectedInput = document.querySelectorAll(klaviyoJS.emailFieldSelectors[i]);
                if (selectedInput) {
                    Array.from(selectedInput).forEach(klavInput => {
                        if (klavInput && !klavInput.hasAttribute('data-listener')) {
                            klavInput.setAttribute('data-listener', 'klaviyo');
                            klavInput.addEventListener("change", (klavInput) => klaviyoChangeEvent(klavInput));
                        }
                    })
                }
            }
        }

        <iscomment>This is the onChange event function that handles logic to make API calls to klaviyo.idenfity({}) with the expected values. When a user enters a value into an input, this function
        evaluates whether to make the call to klaviyo.identify with either the email, email & phone number or the phone number. All calls are first checked and formatted via regex patterns to reduce the
        number of invalid calls to the API.

        NOTE: This function and its associated helpers also handle situations with a known bug in the klaviyo.identify call that occurrs when only a phone number was used. In some cases,
        the klaviyo.identify() API creates a false exchange ID when a call to identy was made with only a phone number. The helper functions phoneOrEmail() determines whether the entered value is an
        email or phone number, then identifyPhone formats and stores the phone number, checks if a legitimate exhcnageID is valid - and saves the phone number to be submitted with a captured email
        address so both email & phone are passed concurrently to klaviyo.identify() </iscomment>
        function klaviyoChangeEvent(input){
            if (!klaviyoJS.identifiedUser) {
                klaviyoJS.phoneOrEmail(input);
            }
            if (input.target.pattern.length && input.target.value.match(input.target.pattern)) {
                if (klaviyoJS.identifiedUser && klaviyoJS.exchangeID && klaviyoJS.phone) {
                    klaviyo.identify({ '$email' : input.target.value, '$phone_number' : klaviyoJS.phone }).then(() => { klaviyoJS.identifiedUser = true; klaviyoJS.exchangeID = klaviyoJS.getExchangeID(); });
                }
            } else {
                if (klaviyoJS.identifiedUser && klaviyoJS.exchangeID && klaviyoJS.phone && klaviyoJS.sfccEmailRegex.test (input.target.value)) {
                    klaviyo.identify({ '$email' : input.target.value, '$phone_number' : klaviyoJS.phone }).then(() => { klaviyoJS.identifiedUser = true; klaviyoJS.exchangeID = klaviyoJS.getExchangeID(); });
                }
            }
        }

        <iscomment>Calling klaviyoListeners() here is our 'init' function that fires off the inline JS that captures the CSS selectors set in two Site Preferences in Business Manager
        and applies klaviyo listeners to the corresponding input fields</iscomment>
        klaviyoListeners();
    </script>
</isif>
